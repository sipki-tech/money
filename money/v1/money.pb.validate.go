// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: money/v1/money.proto

package moneypb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"

	currencypb "github.com/sipki-tech/currency/currency/v1"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort

	_ = currencypb.Code(0)
)

// Validate checks the field values on Decimal with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Decimal) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Decimal with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in DecimalMultiError, or nil if none found.
func (m *Decimal) ValidateAll() error {
	return m.validate(true)
}

func (m *Decimal) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if !_Decimal_Value_Pattern.MatchString(m.GetValue()) {
		err := DecimalValidationError{
			field:  "Value",
			reason: "value does not match regex pattern \"[+-]?([0-9]*[.])?[0-9]+\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DecimalMultiError(errors)
	}

	return nil
}

// DecimalMultiError is an error wrapping multiple validation errors returned
// by Decimal.ValidateAll() if the designated constraints aren't met.
type DecimalMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DecimalMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DecimalMultiError) AllErrors() []error { return m }

// DecimalValidationError is the validation error returned by Decimal.Validate
// if the designated constraints aren't met.
type DecimalValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DecimalValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DecimalValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DecimalValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DecimalValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DecimalValidationError) ErrorName() string { return "DecimalValidationError" }

// Error satisfies the builtin error interface
func (e DecimalValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDecimal.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DecimalValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DecimalValidationError{}

var _Decimal_Value_Pattern = regexp.MustCompile("[+-]?([0-9]*[.])?[0-9]+")

// Validate checks the field values on Money with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Money) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Money with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in MoneyMultiError, or nil if none found.
func (m *Money) ValidateAll() error {
	return m.validate(true)
}

func (m *Money) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if _, ok := _Money_CurrencyCode_NotInLookup[m.GetCurrencyCode()]; ok {
		err := MoneyValidationError{
			field:  "CurrencyCode",
			reason: "value must not be in list [0]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := currencypb.Code_name[int32(m.GetCurrencyCode())]; !ok {
		err := MoneyValidationError{
			field:  "CurrencyCode",
			reason: "value must be one of the defined enum values",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetDecimal() == nil {
		err := MoneyValidationError{
			field:  "Decimal",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetDecimal()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, MoneyValidationError{
					field:  "Decimal",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, MoneyValidationError{
					field:  "Decimal",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDecimal()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MoneyValidationError{
				field:  "Decimal",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if _, ok := _Money_Type_NotInLookup[m.GetType()]; ok {
		err := MoneyValidationError{
			field:  "Type",
			reason: "value must not be in list [0]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := Type_name[int32(m.GetType())]; !ok {
		err := MoneyValidationError{
			field:  "Type",
			reason: "value must be one of the defined enum values",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MoneyMultiError(errors)
	}

	return nil
}

// MoneyMultiError is an error wrapping multiple validation errors returned by
// Money.ValidateAll() if the designated constraints aren't met.
type MoneyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MoneyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MoneyMultiError) AllErrors() []error { return m }

// MoneyValidationError is the validation error returned by Money.Validate if
// the designated constraints aren't met.
type MoneyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MoneyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MoneyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MoneyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MoneyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MoneyValidationError) ErrorName() string { return "MoneyValidationError" }

// Error satisfies the builtin error interface
func (e MoneyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMoney.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MoneyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MoneyValidationError{}

var _Money_CurrencyCode_NotInLookup = map[currencypb.Code]struct{}{
	0: {},
}

var _Money_Type_NotInLookup = map[Type]struct{}{
	0: {},
}
